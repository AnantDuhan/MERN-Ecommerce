# api.py

from flask import Flask, jsonify, request
from flask_cors import CORS
import os
from dotenv import load_dotenv
import pickle
import pandas as pd

# Load environment variables from a .env file
load_dotenv()

# --- Load Model and Data ---
try:
    # Load the trained recommendation model
    with open('recommendation_model.pkl', 'rb') as f:
        model = pickle.load(f)
    
    # Load the ratings data to get a list of all unique product IDs
    df = pd.read_csv('ratings.csv')
    all_product_ids = df['product_id'].unique()
except FileNotFoundError:
    print("Error: 'recommendation_model.pkl' or 'ratings.csv' not found.")
    print("Please make sure you have trained the model and have the data file in the same directory.")
    exit()


# --- Initialize Flask App ---
app = Flask(__name__)

# Configure CORS using environment variable for security
cors_origin = os.getenv('CORS_ORIGIN', '*') # Default to allow all if not set
CORS(app, origins=[cors_origin])


# --- API Endpoint for Recommendations ---
@app.route('/recommend', methods=['GET'])
def get_recommendations():
    """
    Recommends products based on a given product_id.
    Query Parameter: product_id (string) - The ID of the product to get recommendations for.
    """
    product_id_str = request.args.get('product_id')

    if not product_id_str:
        return jsonify({"error": "product_id query parameter is required"}), 400

    try:
        # Convert product_id to the correct type if necessary (e.g., int)
        # Assuming product IDs in your CSV are the same type as the input
        product_id = type(all_product_ids[0])(product_id_str)
    except (ValueError, TypeError):
        return jsonify({"error": "Invalid product_id format"}), 400

    # Predict ratings for all other products based on the input product
    predictions = []
    for pid in all_product_ids:
        if pid != product_id:
            # model.predict() needs a user_id, but for item-based models,
            # we can use a dummy user and rely on the item's internal ID.
            pred = model.predict(uid='dummy_user', iid=pid)
            predictions.append({'product_id': pid, 'estimated_rating': pred.est})
    
    # Sort predictions by estimated rating in descending order
    predictions.sort(key=lambda x: x['estimated_rating'], reverse=True)
    
    # Get top 6 recommended product IDs
    top_6_recs_ids = [p['product_id'] for p in predictions[:6]]
    
    return jsonify({"recommendations": top_6_recs_ids})


if __name__ == '__main__':
    # Get port from environment variable or default to 5001
    port = int(os.getenv('PORT', 5001))
    app.run(port=port, debug=False) # Set debug=False for production